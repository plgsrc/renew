; ===== renew.exe V1.71 Windows 10 用 Kenjiy ======
;
; Cのソースファイルの文書整形
;
; C用ソース ファイルを見やすく整える
; このファイルの行の最初に';'があればコメントとして処理する
;
; renew.exe  実行ファイル
; renew.ini  条件ファイル(無い場合は,プログラム起動時新規作成する)
;
; 使い方
; 実行     :  renew.exe<Enter> <--- 最初に実行
; 書式     :  file_name <name.ini> <-parameter>
;                ↑        ↑         ↑parameter: オプションンパラメータ(iniﾌｧｲﾙより優先する,省略可能)
;                ↑        ↑name.ini: renew.ini 以外のパラメータファイル指定の場合(省略可能)
;                ↑file_name: Cのソースファイル.(省略できない) '*','?'が使用可能
;
; 起動時に下記書式のparameterを指定するとこのiniﾌｧｲﾙより優先するので一時的に変更したい時に有効
; parameterを複数指定する時は,ｽﾍﾟｰｽで区切って指定する事
; 例 renew.exe *.c
; 例 renew.exe *.h -a3
;                   ↑高整形 指定
; 例 renew.exe *.c -m0 -u0 -t0
;                   ↑  ↑  ↑
;                   ↑  ↑  parameterを複数指定する時は,ｽﾍﾟｰｽで区切って指定する事
;                   ↑  while(){} の'{'〜'}'の縦の位置を0:文書整形のみする
;                   行の処理 0:何もしない
; 例 renew.exe *.h -b2 -o1
;                   ↑  ↑
;                   ↑  #if, #else, #endif のTABを調正する(TABがずれた時の確認用) 1:TAB調整
;                   ソース名をリネームして+.oldとし,ソースファイルを整形する
; 例 renew.exe *.h -m1
;                   ↑
;                  コメント行の処理 1:ﾌﾟﾛｸﾞﾗﾑの場合は調整する+TABを揃える
; debug_modeの使い方 範囲は 1〜9。renew_debug.txt と renew_debug2.txt が作られる
; 例 renew.exe *.c -z9
;                   ↑
;                  debugで記録する明細表示
; 例 renew.exe *.c -z1
;                   ↑
;                   tab_stack番号表示(どこでTABがずれたか分かる)
;
;------------------ 以下条件部 ------------------------
; 下記の数字(z)の通りの数字を希望に応じて変更する

;-- ｺﾏﾝﾄﾞ-------- 数字(z) --; ﾊﾟﾗﾒｰﾀ ----- 内容 -------------------------------------------------------

all                 0       ; '-a?' 定義、宣言の変換の有無(?=0〜9:6から9は自由に書き換え)
                            ; ここによく使う番号を指定。0 は下記初期値に従う
                            ; 下記 all-番号 のﾊﾟﾗﾒｰﾀ  ?=数字 : 設定値, ?=数字以外 : 全て初期値どうりにする
all-1   -b1 -c0 -d2 -e2 -f0 -g0 -h1 -i? -j0 -k0 -l0 -m0 -n? -o0 -p0 -q0 -r0 -s0 -t0 -u0 -v0 -w0 -x0 -y0 -T1 ; 低整形
all-2   -b1 -c2 -d2 -e2 -f0 -g2 -h2 -i? -j0 -k0 -l1 -m0 -n? -o0 -p0 -q0 -r2 -s1 -t2 -u2 -v1 -w1 -x2 -y0 -T1 ; 中整形
all-3   -b1 -c2 -d2 -e2 -f0 -g2 -h2 -i? -j1 -k0 -l1 -m1 -n? -o? -p1 -q1 -r2 -s1 -t2 -u2 -v1 -w1 -x2 -y2 -T1 ; 高整形
all-4   -b2 -c2 -d2 -e2 -f0 -g2 -h2 -i? -j0 -k0 -l1 -m0 -n? -o? -p0 -q0 -r2 -s1 -t2 -u2 -v1 -w1 -x2 -y0 -T1 ; 中整形+ｿｰｽ書換
all-5   -b2 -c2 -d2 -e2 -f0 -g2 -h2 -i? -j1 -k0 -l1 -m1 -n? -o? -p1 -q1 -r2 -s1 -t2 -u2 -v1 -w1 -x2 -y2 -T1 ; 高整形+ｿｰｽ書換
all-6   -b? -c? -d? -e? -f0 -g? -h? -i? -j? -k? -l? -m? -n? -o? -p? -q? -r? -s? -t? -u? -v? -w? -x? -y? -T? ; ﾌﾘｰ1
all-7   -b? -c? -d? -e? -f0 -g? -h? -i? -j? -k? -l? -m? -n? -o? -p? -q? -r? -s? -t? -u? -v? -w? -x? -y? -T? ; ﾌﾘｰ2
all-8   -b? -c? -d? -e? -f0 -g? -h? -i? -j? -k? -l? -m? -n? -o? -p? -q? -r? -s? -t? -u? -v? -w? -x? -y? -T? ; ﾌﾘｰ3
all-9   -b? -c? -d? -e? -f0 -g? -h? -i? -j? -k? -l? -m? -n? -o? -p? -q? -r? -s? -t? -u? -v? -w? -x? -y? -T? ; ﾌﾘｰ4

;----------------- 初期値 --;---------------説明 ---------------------------------------------------------
source_name         1       ; '-b?' ｿｰｽ名の処理 0:検査のみ, 1:ｿｰｽ名は変わらず,ｿｰｽﾌｧｲﾙを整形し +.newを新規に作る
                            ;      2:ｿｰｽﾌｧｲﾙ整形し､古いｿｰｽ名を+.old, 3:ｿｰｽﾌｧｲﾙ整形し,oldを作らない

define_tab          2       ; '-c?' #define の第1番目定義と第2番目間定数のTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最小TAB位置
                            ;      例 -c0
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define   ABCD(a) if(a) {
                            ;      例 -c1
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define ABCD( a ) if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD 1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH 128
                            ;      例 -c2
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define ABCD( a )   if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint        unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD        1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH   128
                            ;      例 -c5
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define ABCD( a )   if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint        unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD        1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH   128
                            ;      例 -c6
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define ABCD(a) if(a){      ---> #define ABCD( a )       if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint            unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD            1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH       128

define_com_tab      2       ; '-d?' #define のｺﾒﾝﾄのTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最大TAB位置
                            ;      例 -d1
                            ;         0---1---2---3---4 TAB位置      ---> 0---1---2---3---4---5---6---7
                            ;         #define ABC 1234    // comment ---> #define ABC 1234 // comment
                            ;         #define ABCDEF abcd123 // test ---> #define ABCDEF abcd123 // test
                            ;      例 -d5
                            ;         0---1---2---3---4 TAB位置      ---> 0---1---2---3---4---5---6---7
                            ;         #define ABC 1234 // comment    ---> #define ABC 1234    // comment
                            ;         #define ABCDEF abcd123 // test ---> #define ABCDEF abcd123 // test
                            ;      例 -d20
                            ;         0---1---2---3---4 TAB位置      ---> 0---1---2---3---4---5---6---7
                            ;         #define ABC 1234 // comment    ---> #define ABC 1234        // comment
                            ;         #define ABCDEF abcd123 // test ---> #define ABCDEF abcd123  // test

other_com_tab       2       ; '-e?' #defien以外のｺﾒﾝﾄのTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:最大TAB制限なし, 3〜:最大TAB位置
                            ;      例 -e1
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6
                            ;         a=0;    // test1            ---> a = 0; // test1
                            ;         abcdef1234=0;// test2       ---> abcdef1234 = 0; // test2
                            ;      例 -e3
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         a=0;    // test1            ---> a = 0;      // test1
                            ;         abcdef1234=0;// test2       ---> abcdef1234 = 0; // test2
                            ;      例 -e20
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         a=0;    // test1            ---> a = 0;          // test1
                            ;         abcdef1234=0;// test2       ---> abcdef1234 = 0; // test2

shit_jis_mode       0       ; '-f?' ソースが 0:自動, 1:utf8, 2:Shift JIS

local_int_tab       2       ; '-g?' ローカル変数のint, char, long, unsignedの第一定義のTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最大TAB位置
                            ;      例 -g1
                            ;         0---1---2---3- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         void abcd(void)          ---> void abcd(void)
                            ;         {                        ---> {
                            ;             int  abcd1;          --->     int abcd1;
                            ;             char abcd2;          --->     char abcd2;
                            ;             unsigned long abcd3; --->     unsigned long abcd3;
                            ;      例 -g3
                            ;         0---1---2---3- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         void abcd(void)          ---> void abcd(void)
                            ;         {                        ---> {
                            ;             int  abcd1;          --->     int     abcd1;
                            ;             char abcd2;          --->     char    abcd2;
                            ;             unsigned long abcd3; --->     unsigned long abcd3;
                            ;      例 -g7
                            ;         0---1---2---3- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         void abcd(void)          ---> void abcd(void)
                            ;         {                        ---> {
                            ;             int  abcd1;          --->     int             abcd1;
                            ;             char abcd2;          --->     char            abcd2;
                            ;             unsigned long abcd3; --->     unsigned long   abcd3;

big_kakko_pair      2       ; '-h?' '{'〜'}' 連続の位置
                            ;      0:スペースのみ, 1:左側に揃える(最小TAB=1), 2:自動でTAB作成(ｽﾍﾟｰｽ+TABで合わせる)
                            ;      例 -h0
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6---7---8
                            ;       abcd[] =   {123, 456, 789} ---> abcd[] = { 123, 456, 789 }
                            ;       d[] = {1,2,3 }             ---> d[] = { 1, 2, 3 }
                            ;       ef[] =  { 23, 45, 6789}    ---> ef[] = { 23, 45, 6789 }
                            ;      例 -h1
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6---7---8
                            ;       abcd[] =   {123, 456, 789} ---> abcd[] =    { 123, 456, 789 }
                            ;       d[] = {1,2,3 }             ---> d[] =       { 1, 2, 3 }
                            ;       ef[] =  { 23, 45, 6789}    ---> ef[] =      { 23, 45, 6789 }
                            ;      例 -h2
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6---7---8
                            ;       abcd[] =    {123, 456, 789} ---> abcd[] = { 123, 45, 789  }
                            ;       d[] = {1,2,3 }             ---> d[] =     { 1,   2,  3    }
                            ;       ef[] =  { 23, 45, 6789}    ---> ef[] =    { 23,  45, 6789 }

limit_line        37        ; '-i?' 1行の最大数(TAB換算)を規制する。1行の最大TAB数(?=0:無制限, ?=20(最小)〜99
                            ;      文字数は ?の4倍
                            ;      この指定文字数を超える場合TABをｽﾍﾟｰｽとする
                            ;       例 -p33
                            ;         26--27--28--29---30-- TAB位置 ---> ---27---28--29--30--31--32--
                            ;             abcd=0;//test             --->    abcd = 0;    // test
                            ;             c(1); //commment          --->    c( 1 );      // comment
                            ;       例 -p32
                            ;         26--27--28--29---30-- TAB位置 ---> ---27---28--29--30--31--32--
                            ;             abcd=0;//test             --->    abcd = 0;    // test
                            ;             c(1); //commment          --->    c( 1 ); // comment

kolon               1       ; '-j?' ':','::' コロンの前後のスペース処理
                            ;      0:何もしない, 1:自動でスペースを削除/挿入する
                            ;      例 -i1
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6
                            ;           case abc :             --->     case abc:

cut_comment         0       ; '-k?' ｺﾒﾝﾄを削除する。下記番号を加算した番号を指定(?=0〜15)
                            ;      0:削除しない
                            ;      1:1行の右端のｺﾒﾝﾄ(//〜, /*〜*/)を削除する
                            ;      2:1行中の部分ｺﾒﾝﾄ(/*〜*/)を削除する
                            ;      4:ｺﾒﾝﾄ行(//〜)を削除する
                            ;      8:ｺﾒﾝﾄ複数行(/*〜, 〜*/)を削除する
                            ;      例 -j3
                            ;        1:1行の右端のｺﾒﾝﾄ(//〜, /*〜*/)を削除する
                            ;        2:1行中の部分ｺﾒﾝﾄ(/*〜*/)を削除する
                            ;      例 -j15
                            ;        1:1行の右端のｺﾒﾝﾄ(//〜, /*〜*/)を削除する
                            ;        2:1行中の部分ｺﾒﾝﾄ(/*〜*/)を削除する
                            ;        4:ｺﾒﾝﾄ行(//〜)を削除する
                            ;        8:ｺﾒﾝﾄ複数行(/*〜, 〜*/)を削除する

long_comment        1       ; '-l?' '/*〜*/' 行の処理
                            ;      0:変換しない
                            ;      1:行の最後の '/*〜*/' を'//'に変換
                            ;      2:'/*'で始まる複数行の長い文章までを'//'に変換
                            ;     例 -k1
                            ;         0---1---2---3----4--- TAB位置 ---> 0---1---2---3---4---5
                            ;             abcde= 0;/* test0 */      --->     abcde = 0;  // test0
                            ;             a=b;// test1              --->     a = 0;      // test1
                            ;             //abc(1);//test2          --->     // abc(1);//test2
                            ;      例 -k2
                            ;         0---1---2 TAB位置      ---> 0---1---2---3---4---5---6
                            ;         /*                     ---> //
                            ;           This is sample.      ---> // This is sample.
                            ;           20xx年yy月zz日       ---> // 20xx年yy月zz日
                            ;           char abcd[]={1,2,3}; ---> // char abcd[]={1,2,3};
                            ;         */                     ---> //

comment_prog         1      ; '-m?' '//' 行の処理
                            ;      0:何もしない, 1:ﾌﾟﾛｸﾞﾗﾑの場合は調整する+TABを揃える
                            ;       例 -m1
                            ;         0---1---2---3----4--- TAB位置 ---> 0---1---2---3---4---5
                            ;             abcde= 0;/* test0 */      --->     abcde = 0;  // test0
                            ;             a=b;// test1              --->     a = 0;      // test1
                            ;        //abc(1);//test2               ---> //  abc( 1 );   //test2
                            ;        ↑'//'位置が先頭+ﾌﾟﾛｸﾞﾗﾑなのでﾌﾟﾛｸﾞﾗﾑとして調整する
                            ;             //abc(1);//test2          --->     // abc(1);//test2
                            ;             ↑'//'位置が先頭でない場合は何もしない
                            ;             b(1); //test3             --->     b( 1 );     // test3
                            ;               //ﾃｽﾄ                   --->     // ﾃｽﾄ
                            ;               ↑'//'位置が前行とそろってない場合,TAB=0とする
                            ;             c(1); //test4             --->     c( 1 );     // test4
                            ;                   //ここはｺﾒﾝﾄ        --->                 // ここはｺﾒﾝﾄ
                            ;                   ↑'//'位置が前行と同じｺﾒﾝﾄ位置の場合,前行にそろえる

kakko_space         0       ; '-n?' 括弧の前後の処理
                            ;      0:連続する括弧の最初と最後はｽﾍﾟｰｽを入れる, 1:括弧の内側はｽﾍﾟｰｽを入れない
                            ;       例 -n0
                            ;         0---1---2---3--- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         if( abc( 1 ) == 0 ) d = 0; ---> if( abc(1) == 0 ) d = 0;
                            ;       例 -n1:
                            ;         0---1---2---3--- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         if( abc( 1 ) == 0 ) d = 0; ---> if(abc(1) == 0) d = 0;

ifdef_mode          0       ; '-o?' #if, #else, #endif のTABを調正する(TABがずれた時の確認用)
                            ;      0:何もしない, 1:TAB調整

yen                 1       ; '-p?' '\'行の処理
                            ;      0:最初のTABは変更なし, 1:調整する

struct_big_kakko    0       ; '-q?' struct{} の'{'〜'}'の縦の位置をそろえる
                            ;      0:文書整形のみする, 1:'struct {'+改行 にする, 2:改行+{で,{ }を縦に揃える

if_big_kakko        2       ; '-r?' if(){} の'{'〜'}'の縦の位置をそろえる('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:if(...) {+改行 にする, 2:改行+{で,{ }を縦に揃える

else_big_kakko      1       ; '-s?' else{} の'{'〜'}'の縦の位置をそろえる('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:else {+改行 にする, 2:改行+{で,{ }を縦に揃える

for_big_kakko       2       ; '-t?' for(){} の'{'〜'}'の縦の位置をそろえる('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:for(...) {+改行 にする, 2:改行+{で,{ }を縦に揃える

while_big_kakko     2       ; '-u?' while(){} の'{'〜'}'の縦の位置をそろえる({'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:while(...) {+改行 にする, 2:改行+{で,{ }を縦に揃える

do_big_kakko        1       ; '-v?' do{} while() の'{'〜'}'の縦の位置をそろえる('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:do {+改行 にする, 2:改行+{で,{ }を縦に揃える

try_big_kakko       1       ; '-w?' try{} の'{'〜'}'の縦の位置をそろえる('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:try {+改行 にする, 2:改行+{で,{ }を縦に揃える

switch_big_kakko    2       ; '-x?' switch(){} の'{'〜'}'の縦の位置をそろえる('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1:switch(...) {+改行 にする, 2:改行+{で,{ }を縦に揃える

other_big_kakko     0       ; '-y?' その他の'{'〜'}'の処理('{'〜'}'の場合は揃えない)
                            ;      0:文書整形のみする, 1,2:改行+{で,{ }を縦に揃える

debug_mode          0       ; '-z?' debug用 0:記録なし
                            ;      1:tab_stack_cnt, 2:big_kakko_cnt, 3:if_stack_top
                            ;      4:hojo_flag，5:tab_pos, 6:src_line_no，7:src_com_pos
                            ;      8:sub_type，9:debug情報表示

